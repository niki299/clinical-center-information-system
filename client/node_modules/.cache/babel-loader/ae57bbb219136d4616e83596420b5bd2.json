{"remainingRequest":"C:\\Users\\Jokic Stevan\\Desktop\\Vujko\\Faks\\6. Semestar\\clinical-center-information-system\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jokic Stevan\\Desktop\\Vujko\\Faks\\6. Semestar\\clinical-center-information-system\\client\\node_modules\\vuetify\\lib\\util\\colorUtils.js","dependencies":[{"path":"C:\\Users\\Jokic Stevan\\Desktop\\Vujko\\Faks\\6. Semestar\\clinical-center-information-system\\client\\node_modules\\vuetify\\lib\\util\\colorUtils.js","mtime":1586429493716},{"path":"C:\\Users\\Jokic Stevan\\Desktop\\Vujko\\Faks\\6. Semestar\\clinical-center-information-system\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1586429448575},{"path":"C:\\Users\\Jokic Stevan\\Desktop\\Vujko\\Faks\\6. Semestar\\clinical-center-information-system\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1586429445810}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGgiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiQzpcXFVzZXJzXFxKb2tpYyBTdGV2YW5cXERlc2t0b3BcXFZ1amtvXFxGYWtzXFw2LiBTZW1lc3RhclxcY2xpbmljYWwtY2VudGVyLWluZm9ybWF0aW9uLXN5c3RlbVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiQzpcXFVzZXJzXFxKb2tpYyBTdGV2YW5cXERlc2t0b3BcXFZ1amtvXFxGYWtzXFw2LiBTZW1lc3RhclxcY2xpbmljYWwtY2VudGVyLWluZm9ybWF0aW9uLXN5c3RlbVxcY2xpZW50XFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHsgY29uc29sZVdhcm4gfSBmcm9tICcuL2NvbnNvbGUnOwppbXBvcnQgeyBjaHVuaywgcGFkRW5kIH0gZnJvbSAnLi9oZWxwZXJzJzsKaW1wb3J0IHsgdG9YWVogfSBmcm9tICcuL2NvbG9yL3RyYW5zZm9ybVNSR0InOwpleHBvcnQgZnVuY3Rpb24gY29sb3JUb0ludChjb2xvcikgewogIHZhciByZ2I7CgogIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInKSB7CiAgICByZ2IgPSBjb2xvcjsKICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHsKICAgIHZhciBjID0gY29sb3JbMF0gPT09ICcjJyA/IGNvbG9yLnN1YnN0cmluZygxKSA6IGNvbG9yOwoKICAgIGlmIChjLmxlbmd0aCA9PT0gMykgewogICAgICBjID0gYy5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChjaGFyKSB7CiAgICAgICAgcmV0dXJuIGNoYXIgKyBjaGFyOwogICAgICB9KS5qb2luKCcnKTsKICAgIH0KCiAgICBpZiAoYy5sZW5ndGggIT09IDYpIHsKICAgICAgY29uc29sZVdhcm4oIiciLmNvbmNhdChjb2xvciwgIicgaXMgbm90IGEgdmFsaWQgcmdiIGNvbG9yIikpOwogICAgfQoKICAgIHJnYiA9IHBhcnNlSW50KGMsIDE2KTsKICB9IGVsc2UgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ29sb3JzIGNhbiBvbmx5IGJlIG51bWJlcnMgb3Igc3RyaW5ncywgcmVjaWV2ZWQgIi5jb25jYXQoY29sb3IgPT0gbnVsbCA/IGNvbG9yIDogY29sb3IuY29uc3RydWN0b3IubmFtZSwgIiBpbnN0ZWFkIikpOwogIH0KCiAgaWYgKHJnYiA8IDApIHsKICAgIGNvbnNvbGVXYXJuKCJDb2xvcnMgY2Fubm90IGJlIG5lZ2F0aXZlOiAnIi5jb25jYXQoY29sb3IsICInIikpOwogICAgcmdiID0gMDsKICB9IGVsc2UgaWYgKHJnYiA+IDB4ZmZmZmZmIHx8IGlzTmFOKHJnYikpIHsKICAgIGNvbnNvbGVXYXJuKCInIi5jb25jYXQoY29sb3IsICInIGlzIG5vdCBhIHZhbGlkIHJnYiBjb2xvciIpKTsKICAgIHJnYiA9IDB4ZmZmZmZmOwogIH0KCiAgcmV0dXJuIHJnYjsKfQpleHBvcnQgZnVuY3Rpb24gaW50VG9IZXgoY29sb3IpIHsKICB2YXIgaGV4Q29sb3IgPSBjb2xvci50b1N0cmluZygxNik7CiAgaWYgKGhleENvbG9yLmxlbmd0aCA8IDYpIGhleENvbG9yID0gJzAnLnJlcGVhdCg2IC0gaGV4Q29sb3IubGVuZ3RoKSArIGhleENvbG9yOwogIHJldHVybiAnIycgKyBoZXhDb2xvcjsKfQpleHBvcnQgZnVuY3Rpb24gY29sb3JUb0hleChjb2xvcikgewogIHJldHVybiBpbnRUb0hleChjb2xvclRvSW50KGNvbG9yKSk7Cn0KLyoqDQogKiBDb252ZXJ0cyBIU1ZBIHRvIFJHQkEuIEJhc2VkIG9uIGZvcm11bGEgZnJvbSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTVg0KICoNCiAqIEBwYXJhbSBjb2xvciBIU1ZBIGNvbG9yIGFzIGFuIGFycmF5IFswLTM2MCwgMC0xLCAwLTEsIDAtMV0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIEhTVkF0b1JHQkEoaHN2YSkgewogIHZhciBoID0gaHN2YS5oLAogICAgICBzID0gaHN2YS5zLAogICAgICB2ID0gaHN2YS52LAogICAgICBhID0gaHN2YS5hOwoKICB2YXIgZiA9IGZ1bmN0aW9uIGYobikgewogICAgdmFyIGsgPSAobiArIGggLyA2MCkgJSA2OwogICAgcmV0dXJuIHYgLSB2ICogcyAqIE1hdGgubWF4KE1hdGgubWluKGssIDQgLSBrLCAxKSwgMCk7CiAgfTsKCiAgdmFyIHJnYiA9IFtmKDUpLCBmKDMpLCBmKDEpXS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgIHJldHVybiBNYXRoLnJvdW5kKHYgKiAyNTUpOwogIH0pOwogIHJldHVybiB7CiAgICByOiByZ2JbMF0sCiAgICBnOiByZ2JbMV0sCiAgICBiOiByZ2JbMl0sCiAgICBhOiBhCiAgfTsKfQovKioNCiAqIENvbnZlcnRzIFJHQkEgdG8gSFNWQS4gQmFzZWQgb24gZm9ybXVsYSBmcm9tIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hTTF9hbmRfSFNWDQogKg0KICogQHBhcmFtIGNvbG9yIFJHQkEgY29sb3IgYXMgYW4gYXJyYXkgWzAtMjU1LCAwLTI1NSwgMC0yNTUsIDAtMV0NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIFJHQkF0b0hTVkEocmdiYSkgewogIGlmICghcmdiYSkgcmV0dXJuIHsKICAgIGg6IDAsCiAgICBzOiAxLAogICAgdjogMSwKICAgIGE6IDEKICB9OwogIHZhciByID0gcmdiYS5yIC8gMjU1OwogIHZhciBnID0gcmdiYS5nIC8gMjU1OwogIHZhciBiID0gcmdiYS5iIC8gMjU1OwogIHZhciBtYXggPSBNYXRoLm1heChyLCBnLCBiKTsKICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7CiAgdmFyIGggPSAwOwoKICBpZiAobWF4ICE9PSBtaW4pIHsKICAgIGlmIChtYXggPT09IHIpIHsKICAgICAgaCA9IDYwICogKDAgKyAoZyAtIGIpIC8gKG1heCAtIG1pbikpOwogICAgfSBlbHNlIGlmIChtYXggPT09IGcpIHsKICAgICAgaCA9IDYwICogKDIgKyAoYiAtIHIpIC8gKG1heCAtIG1pbikpOwogICAgfSBlbHNlIGlmIChtYXggPT09IGIpIHsKICAgICAgaCA9IDYwICogKDQgKyAociAtIGcpIC8gKG1heCAtIG1pbikpOwogICAgfQogIH0KCiAgaWYgKGggPCAwKSBoID0gaCArIDM2MDsKICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiAobWF4IC0gbWluKSAvIG1heDsKICB2YXIgaHN2ID0gW2gsIHMsIG1heF07CiAgcmV0dXJuIHsKICAgIGg6IGhzdlswXSwKICAgIHM6IGhzdlsxXSwKICAgIHY6IGhzdlsyXSwKICAgIGE6IHJnYmEuYQogIH07Cn0KZXhwb3J0IGZ1bmN0aW9uIEhTVkF0b0hTTEEoaHN2YSkgewogIHZhciBoID0gaHN2YS5oLAogICAgICBzID0gaHN2YS5zLAogICAgICB2ID0gaHN2YS52LAogICAgICBhID0gaHN2YS5hOwogIHZhciBsID0gdiAtIHYgKiBzIC8gMjsKICB2YXIgc3ByaW1lID0gbCA9PT0gMSB8fCBsID09PSAwID8gMCA6ICh2IC0gbCkgLyBNYXRoLm1pbihsLCAxIC0gbCk7CiAgcmV0dXJuIHsKICAgIGg6IGgsCiAgICBzOiBzcHJpbWUsCiAgICBsOiBsLAogICAgYTogYQogIH07Cn0KZXhwb3J0IGZ1bmN0aW9uIEhTTEF0b0hTVkEoaHNsKSB7CiAgdmFyIGggPSBoc2wuaCwKICAgICAgcyA9IGhzbC5zLAogICAgICBsID0gaHNsLmwsCiAgICAgIGEgPSBoc2wuYTsKICB2YXIgdiA9IGwgKyBzICogTWF0aC5taW4obCwgMSAtIGwpOwogIHZhciBzcHJpbWUgPSB2ID09PSAwID8gMCA6IDIgLSAyICogbCAvIHY7CiAgcmV0dXJuIHsKICAgIGg6IGgsCiAgICBzOiBzcHJpbWUsCiAgICB2OiB2LAogICAgYTogYQogIH07Cn0KZXhwb3J0IGZ1bmN0aW9uIFJHQkF0b0NTUyhyZ2JhKSB7CiAgcmV0dXJuICJyZ2JhKCIuY29uY2F0KHJnYmEuciwgIiwgIikuY29uY2F0KHJnYmEuZywgIiwgIikuY29uY2F0KHJnYmEuYiwgIiwgIikuY29uY2F0KHJnYmEuYSwgIikiKTsKfQpleHBvcnQgZnVuY3Rpb24gUkdCdG9DU1MocmdiYSkgewogIHJldHVybiBSR0JBdG9DU1MoX29iamVjdFNwcmVhZCh7fSwgcmdiYSwgewogICAgYTogMQogIH0pKTsKfQpleHBvcnQgZnVuY3Rpb24gUkdCQXRvSGV4KHJnYmEpIHsKICB2YXIgdG9IZXggPSBmdW5jdGlvbiB0b0hleCh2KSB7CiAgICB2YXIgaCA9IE1hdGgucm91bmQodikudG9TdHJpbmcoMTYpOwogICAgcmV0dXJuICgnMDAnLnN1YnN0cigwLCAyIC0gaC5sZW5ndGgpICsgaCkudG9VcHBlckNhc2UoKTsKICB9OwoKICByZXR1cm4gIiMiLmNvbmNhdChbdG9IZXgocmdiYS5yKSwgdG9IZXgocmdiYS5nKSwgdG9IZXgocmdiYS5iKSwgdG9IZXgoTWF0aC5yb3VuZChyZ2JhLmEgKiAyNTUpKV0uam9pbignJykpOwp9CmV4cG9ydCBmdW5jdGlvbiBIZXhUb1JHQkEoaGV4KSB7CiAgdmFyIHJnYmEgPSBjaHVuayhoZXguc2xpY2UoMSksIDIpLm1hcChmdW5jdGlvbiAoYykgewogICAgcmV0dXJuIHBhcnNlSW50KGMsIDE2KTsKICB9KTsKICByZXR1cm4gewogICAgcjogcmdiYVswXSwKICAgIGc6IHJnYmFbMV0sCiAgICBiOiByZ2JhWzJdLAogICAgYTogTWF0aC5yb3VuZChyZ2JhWzNdIC8gMjU1ICogMTAwKSAvIDEwMAogIH07Cn0KZXhwb3J0IGZ1bmN0aW9uIEhleFRvSFNWQShoZXgpIHsKICB2YXIgcmdiID0gSGV4VG9SR0JBKGhleCk7CiAgcmV0dXJuIFJHQkF0b0hTVkEocmdiKTsKfQpleHBvcnQgZnVuY3Rpb24gSFNWQXRvSGV4KGhzdmEpIHsKICByZXR1cm4gUkdCQXRvSGV4KEhTVkF0b1JHQkEoaHN2YSkpOwp9CmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhleChoZXgpIHsKICBpZiAoaGV4LnN0YXJ0c1dpdGgoJyMnKSkgewogICAgaGV4ID0gaGV4LnNsaWNlKDEpOwogIH0KCiAgaGV4ID0gaGV4LnJlcGxhY2UoLyhbXjAtOWEtZl0pL2dpLCAnRicpOwoKICBpZiAoaGV4Lmxlbmd0aCA9PT0gMykgewogICAgaGV4ID0gaGV4LnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKHgpIHsKICAgICAgcmV0dXJuIHggKyB4OwogICAgfSkuam9pbignJyk7CiAgfQoKICBpZiAoaGV4Lmxlbmd0aCA9PT0gNikgewogICAgaGV4ID0gcGFkRW5kKGhleCwgOCwgJ0YnKTsKICB9IGVsc2UgewogICAgaGV4ID0gcGFkRW5kKHBhZEVuZChoZXgsIDYpLCA4LCAnRicpOwogIH0KCiAgcmV0dXJuICIjIi5jb25jYXQoaGV4KS50b1VwcGVyQ2FzZSgpLnN1YnN0cigwLCA5KTsKfQpleHBvcnQgZnVuY3Rpb24gUkdCdG9JbnQocmdiYSkgewogIHJldHVybiAocmdiYS5yIDw8IDE2KSArIChyZ2JhLmcgPDwgOCkgKyByZ2JhLmI7Cn0KLyoqDQogKiBSZXR1cm5zIHRoZSBjb250cmFzdCByYXRpbyAoMS0yMSkgYmV0d2VlbiB0d28gY29sb3JzLg0KICoNCiAqIEBwYXJhbSBjMSBGaXJzdCBjb2xvcg0KICogQHBhcmFtIGMyIFNlY29uZCBjb2xvcg0KICovCgpleHBvcnQgZnVuY3Rpb24gY29udHJhc3RSYXRpbyhjMSwgYzIpIHsKICB2YXIgX3RvWFlaID0gdG9YWVooUkdCdG9JbnQoYzEpKSwKICAgICAgX3RvWFlaMiA9IF9zbGljZWRUb0FycmF5KF90b1hZWiwgMiksCiAgICAgIHkxID0gX3RvWFlaMlsxXTsKCiAgdmFyIF90b1hZWjMgPSB0b1hZWihSR0J0b0ludChjMikpLAogICAgICBfdG9YWVo0ID0gX3NsaWNlZFRvQXJyYXkoX3RvWFlaMywgMiksCiAgICAgIHkyID0gX3RvWFlaNFsxXTsKCiAgcmV0dXJuIChNYXRoLm1heCh5MSwgeTIpICsgMC4wNSkgLyAoTWF0aC5taW4oeTEsIHkyKSArIDAuMDUpOwp9"},{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { consoleWarn } from './console'\nimport { chunk, padEnd } from './helpers'\nimport { toXYZ } from './color/transformSRGB'\n\nexport type ColorInt = number\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number }\nexport type HSVA = HSV & { a: number }\nexport type RGB = { r: number, g: number, b: number }\nexport type RGBA = RGB & { a: number }\nexport type HSL = { h: number, s: number, l: number }\nexport type HSLA = HSL & { a: number }\nexport type Hex = string\nexport type Hexa = string\nexport type Color = string | number | {}\n\nexport function colorToInt (color: Color): ColorInt {\n  let rgb\n\n  if (typeof color === 'number') {\n    rgb = color\n  } else if (typeof color === 'string') {\n    let c = color[0] === '#' ? color.substring(1) : color\n    if (c.length === 3) {\n      c = c.split('').map(char => char + char).join('')\n    }\n    if (c.length !== 6) {\n      consoleWarn(`'${color}' is not a valid rgb color`)\n    }\n    rgb = parseInt(c, 16)\n  } else {\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\n  }\n\n  if (rgb < 0) {\n    consoleWarn(`Colors cannot be negative: '${color}'`)\n    rgb = 0\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\n    consoleWarn(`'${color}' is not a valid rgb color`)\n    rgb = 0xffffff\n  }\n\n  return rgb\n}\n\nexport function intToHex (color: ColorInt): string {\n  let hexColor: string = color.toString(16)\n\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\n\n  return '#' + hexColor\n}\n\nexport function colorToHex (color: Color): string {\n  return intToHex(colorToInt(color))\n}\n\n/**\n * Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color HSVA color as an array [0-360, 0-1, 0-1, 0-1]\n */\nexport function HSVAtoRGBA (hsva: HSVA): RGBA {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\n/**\n * Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV\n *\n * @param color RGBA color as an array [0-255, 0-255, 0-255, 0-1]\n */\nexport function RGBAtoHSVA (rgba: RGBA): HSVA {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVAtoHSLA (hsva: HSVA): HSLA {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLAtoHSVA (hsl: HSLA): HSVA {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBAtoCSS (rgba: RGBA): string {\n  return `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`\n}\n\nexport function RGBtoCSS (rgba: RGBA): string {\n  return RGBAtoCSS({ ...rgba, a: 1 })\n}\n\nexport function RGBAtoHex (rgba: RGBA): Hex {\n  const toHex = (v: number) => {\n    const h = Math.round(v).toString(16)\n    return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n  }\n\n  return `#${[\n    toHex(rgba.r),\n    toHex(rgba.g),\n    toHex(rgba.b),\n    toHex(Math.round(rgba.a * 255)),\n  ].join('')}`\n}\n\nexport function HexToRGBA (hex: Hex): RGBA {\n  const rgba = chunk(hex.slice(1), 2).map((c: string) => parseInt(c, 16))\n\n  return {\n    r: rgba[0],\n    g: rgba[1],\n    b: rgba[2],\n    a: Math.round((rgba[3] / 255) * 100) / 100,\n  }\n}\n\nexport function HexToHSVA (hex: Hex): HSVA {\n  const rgb = HexToRGBA(hex)\n  return RGBAtoHSVA(rgb)\n}\n\nexport function HSVAtoHex (hsva: HSVA): Hex {\n  return RGBAtoHex(HSVAtoRGBA(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length === 6) {\n    hex = padEnd(hex, 8, 'F')\n  } else {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return `#${hex}`.toUpperCase().substr(0, 9)\n}\n\nexport function RGBtoInt (rgba: RGBA): ColorInt {\n  return (rgba.r << 16) + (rgba.g << 8) + rgba.b\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n *\n * @param c1 First color\n * @param c2 Second color\n */\nexport function contrastRatio (c1: RGBA, c2: RGBA): number {\n  const [, y1] = toXYZ(RGBtoInt(c1))\n  const [, y2] = toXYZ(RGBtoInt(c2))\n\n  return (Math.max(y1, y2) + 0.05) / (Math.min(y1, y2) + 0.05)\n}\n"],"sourceRoot":""}]}